#ifndef DECODINGSTATISTCS_H
#define DECODINGSTATISTCS_H

#include <string>

/**
 * @brief Simple QT model to expose QOpenHD decoding statistics to the UI.
 * singleton, corresponding qt name is "_decodingStatistics" (see main)
 * Data generated by OpenHD itself (e.g. the encoder stats from the air pi) should be handled by a different model
 * Depending on the actually used implementation, some stats might not be available
 * (e.g. when using gstreamer, or the external decode service)
 */
class DecodingStatistcs 
{

    public:
    
    std::string parse_and_enqueue_time = "?";
    void set_parse_and_enqueue_time(const std::string& str);

    std::string decode_time = "?";
    void set_decode_time(const std::string& str);

    // If we do sw decode & opengl display, we drop already decoded frame(s) if a new
    // (already decoded) frame arrives before we have displayed the previous one
    std::string decode_and_render_time = "?";
    void set_decode_and_render_time(const std::string& str);

    int n_renderer_dropped_frames = -1; 
    void set_n_renderer_dropped_frames(const int value);

    int n_rendered_frames = -1;
    void set_n_rendered_frames(const int value);

    int udp_rx_bitrate = -1;
    void set_udp_rx_bitrate(const int value);

    std::string doing_wait_for_frame_decode = "?";
    void set_doing_wait_for_frame_decode(const std::string& str);

    std::string primary_stream_frame_format = "?";
    void set_primary_stream_frame_format(const std::string& str);

    // SW or HW decode
    std::string decoding_type = "?";
    void set_decoding_type(const std::string& str);
    
    int n_missing_rtp_video_packets = -1;
    void set_n_missing_rtp_video_packets(const int value);
    
    // In QOpenHD (rtp udp receiver) measured bitrate
    std::string rtp_measured_bitrate = "-1";
    void set_rtp_measured_bitrate(const std::string& str);
    
    std::string estimate_rtp_fps = "-1";
    void set_estimate_rtp_fps(const std::string& str);
    
    std::string estimate_keyframe_interval = "N/A";
    void set_estimate_keyframe_interval(const std::string& str);

    // Not link related - n frame(s) we had to drop since the decoder cannot keep up with
    // the data stream that is provided to it
    int n_decoder_dropped_frames = -1;
    void set_n_decoder_dropped_frames(const int value);
    
public:
    explicit DecodingStatistcs();
    static DecodingStatistcs& instance();
    void reset_all_to_default();

    void util_set_primary_stream_frame_format(std::string format,int width_px,int height_px);
    void util_set_estimate_keyframe_interval_int(int value);
};

#endif // DECODINGSTATISTCS_H
